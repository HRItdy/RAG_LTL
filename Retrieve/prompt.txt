Given a linear temporal logic task {ltlt}, where 'A', 'O', 'N', 'G', 'U', 'X', 'E' stand for 'and', 'or', 'negative', 'always', 'until', 'next', 'eventually', respectively. Randomly substitute, add or delete the operators to generate 10 similar tasks with corresponding behaviors. The following is an example, the subsequent output should have the same output format without extra explaination.

Task: 
F(a U (b A X c))

Output:

Revised Task: a U (b A X (c))
Behavior: {a} should be true until {b} becomes true. After {b} becomes true {a} can be false, but when {b} becomes true, {c} should be true in the next timestep.

Revised Task: F(a U (b A c))
Behavior: make {b} and {c} be true simultanously, the value of {a} is not concerned.

Revised Task: F(a U (b A F(c)))
Behavior: make {b} and {c} be true sequentially and don't need to be adjacent, the value of {a} is not concerned.

Revised Task: F(a A F(b A F(c)))
Behavior: make {a}, {b} and {c} be true sequentially and don't need to be adjacent.

Revised Task: F(a A b A c)
Behavior: {a}, {b} and {c} finally be true simultanously.

Revised Task: F(a O b O c)
Behavior: more than one atomic proposition in {{a}, {b}, {c}} should be true eventually.

Revised Task: F(a U (b O X(c)))
Behavior: {b} shoule be true, or {b} should not be true first, and then {b} or {c} should be true, the value of {a} is not concerned.

Revised Task: F(a U (b A G(c)))
Behavior: {b} and {c} should be true simultanously, and then {c} should always be true, the value of {a} is not concerned

Revised Task: F(a U (b U c))
Behavior: finally {c} should be true, the value of {a} and {b} are not concerned. 

Revised Task: G(a U (b U c))
Behavior: {c} should always be true, or {a} and {b} be true, but subsequently {c} should be true.

Task: 



Given a linear temporal logic task {ltlt}, where 'A', 'O', 'N', 'G', 'U', 'X', 'E' stand for 'and', 'or', 'negative', 'always', 'until', 'next', 'eventually', respectively. Randomly substitute, add or delete the operators to generate 10 similar tasks with corresponding behaviors. The following is an example

Task: 
F(a U (b A X c))

Output:

Revised Task: a U (b A X (c))
Behavior: {a} should be true until {b} becomes true. After {b} becomes true {a} can be false, but when {b} becomes true, {c} should be true in the next timestep.

Revised Task: F(a U (b A c))
Behavior: make {b} and {c} be true simultanously, the value of {a} is not concerned.

Revised Task: F(a U (b A F(c)))
Behavior: make {b} and {c} be true sequentially and don't need to be adjacent, the value of {a} is not concerned.

Revised Task: F(a A F(b A F(c)))
Behavior: make {a}, {b} and {c} be true sequentially and don't need to be adjacent.

Revised Task: F(a A b A c)
Behavior: {a}, {b} and {c} finally be true simultanously.

Revised Task: F(a O b O c)
Behavior: more than one atomic proposition in {{a}, {b}, {c}} should be true eventually.

Revised Task: F(a U (b O X(c)))
Behavior: {b} shoule be true, or {b} should not be true first, and then {b} or {c} should be true, the value of {a} is not concerned.

Revised Task: F(a U (b A G(c)))
Behavior: {b} and {c} should be true simultanously, and then {c} should always be true, the value of {a} is not concerned

Revised Task: F(a U (b U c))
Behavior: finally {c} should be true, the value of {a} and {b} are not concerned. 

Revised Task: G(a U (b U c))
Behavior: {c} should always be true, or {a} and {b} be true, but subsequently {c} should be true.

Now generate the result of task: "a", the  output should have the same output format with the example and without extra explaination.


Given a linear temporal logic task {ltlt}, where 'A', 'O', 'N', 'G', 'U', 'X', 'E' stand for 'and', 'or', 'negative', 'always', 'until', 'next', 'eventually', respectively. Randomly substitute, add or delete the operators to generate 10 similar tasks with corresponding behaviors. The following is an example

Task: 
E(a U (b A X c))

Output:

Revised Task: a U (b A X (c))
Behavior: {a} should be true until {b} becomes true. After {b} becomes true {a} can be false, but when {b} becomes true, {c} should be true in the next timestep.

Revised Task: E(a U (b A c))
Behavior: make {b} and {c} be true simultanously, the value of {a} is not concerned.

Revised Task: E(a U (b A E(c)))
Behavior: make {b} and {c} be true sequentially and don't need to be adjacent, the value of {a} is not concerned.

Revised Task: E(a A E(b A E(c)))
Behavior: make {a}, {b} and {c} be true sequentially and don't need to be adjacent.

Revised Task: E(a A b A c)
Behavior: {a}, {b} and {c} finally be true simultanously.

Revised Task: E(a O b O c)
Behavior: more than one atomic proposition in {{a}, {b}, {c}} should be true eventually.

Revised Task: E(a U (b O X(c)))
Behavior: {b} shoule be true, or {b} should not be true first, and then {b} or {c} should be true, the value of {a} is not concerned.

Revised Task: E(a U (b A G(c)))
Behavior: {b} and {c} should be true simultanously, and then {c} should always be true, the value of {a} is not concerned

Revised Task: E(a U (b U c))
Behavior: finally {c} should be true, the value of {a} and {b} are not concerned. 

Revised Task: G(a U (b U c))
Behavior: {c} should always be true, or {a} and {b} be true, but subsequently {c} should be true.

Now generate the result of task: "N(d)", the  output should have the same output format with the example and without extra explaination.